// Licence file C:\Users\Mikolaj\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace Kebattle.DomainModel
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        DbSet<AspNetUserRole> AspNetUserRoles { get; set; } // AspNetUserRoles
        DbSet<Company> Companies { get; set; } // Companies
        DbSet<KebabType> KebabTypes { get; set; } // KebabTypes
        DbSet<MeatType> MeatTypes { get; set; } // MeatTypes
        DbSet<Order> Orders { get; set; } // Orders
        DbSet<SauceType> SauceTypes { get; set; } // SauceTypes
        DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        int SaveChanges();
        Task<int> SaveChangesAsync();
        Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        DbChangeTracker ChangeTracker { get; }
        DbContextConfiguration Configuration { get; }
        Database Database { get; }
        DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        DbEntityEntry Entry(object entity);
        IEnumerable<DbEntityValidationResult> GetValidationErrors();
        DbSet Set(Type entityType);
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpDropdiagram(string diagramname, int? ownerId);
        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId);
        List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult);
        Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId);

        List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId);
        List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult);
        Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId);

        int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname);
        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUpgraddiagrams();
        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public DbSet<AspNetUserRole> AspNetUserRoles { get; set; } // AspNetUserRoles
        public DbSet<Company> Companies { get; set; } // Companies
        public DbSet<KebabType> KebabTypes { get; set; } // KebabTypes
        public DbSet<MeatType> MeatTypes { get; set; } // MeatTypes
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<SauceType> SauceTypes { get; set; } // SauceTypes
        public DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        /// <inheritdoc />
        public MyDbContext()
            : base("Name=MyDbContext")
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public MyDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public MyDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AspNetUserConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration());
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration());
            modelBuilder.Configurations.Add(new CompanyConfiguration());
            modelBuilder.Configurations.Add(new KebabTypeConfiguration());
            modelBuilder.Configurations.Add(new MeatTypeConfiguration());
            modelBuilder.Configurations.Add(new OrderConfiguration());
            modelBuilder.Configurations.Add(new SauceTypeConfiguration());
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AspNetUserConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserClaimConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserLoginConfiguration(schema));
            modelBuilder.Configurations.Add(new AspNetUserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
            modelBuilder.Configurations.Add(new KebabTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new MeatTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderConfiguration(schema));
            modelBuilder.Configurations.Add(new SauceTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration(schema));

            return modelBuilder;
        }

        // Stored Procedures
        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var versionParam = new SqlParameter { ParameterName = "@version", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = DBNull.Value;

            var definitionParam = new SqlParameter { ParameterName = "@definition", SqlDbType = SqlDbType.VarBinary, Direction = ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_alterdiagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var versionParam = new SqlParameter { ParameterName = "@version", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = DBNull.Value;

            var definitionParam = new SqlParameter { ParameterName = "@definition", SqlDbType = SqlDbType.VarBinary, Direction = ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_creatediagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_dropdiagram] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpHelpdiagramdefinitionReturnModel>("EXEC @procResult = [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<SpHelpdiagramdefinitionReturnModel>("EXEC [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", diagramnameParam, ownerIdParam).ToListAsync();
            return procResultData;
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpHelpdiagramsReturnModel>("EXEC @procResult = [dbo].[sp_helpdiagrams] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam).ToList();
            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var procResultData = await Database.SqlQuery<SpHelpdiagramsReturnModel>("EXEC [dbo].[sp_helpdiagrams] @diagramname, @owner_id", diagramnameParam, ownerIdParam).ToListAsync();
            return procResultData;
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
            var diagramnameParam = new SqlParameter { ParameterName = "@diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = DBNull.Value;

            var ownerIdParam = new SqlParameter { ParameterName = "@owner_id", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = DBNull.Value;

            var newDiagramnameParam = new SqlParameter { ParameterName = "@new_diagramname", SqlDbType = SqlDbType.NVarChar, Direction = ParameterDirection.Input, Value = newDiagramname, Size = 128 };
            if (newDiagramnameParam.Value == null)
                newDiagramnameParam.Value = DBNull.Value;

            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_renamediagram] @diagramname, @owner_id, @new_diagramname", diagramnameParam, ownerIdParam, newDiagramnameParam, procResultParam);

            return (int)procResultParam.Value;
        }

        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpUpgraddiagrams()
        {
            var procResultParam = new SqlParameter { ParameterName = "@procResult", SqlDbType = SqlDbType.Int, Direction = ParameterDirection.Output };

            Database.ExecuteSqlCommand(TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_upgraddiagrams] ", procResultParam);

            return (int)procResultParam.Value;
        }

        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<AspNetUser> AspNetUsers { get; set; } // AspNetUsers
        public DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } // AspNetUserClaims
        public DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } // AspNetUserLogins
        public DbSet<AspNetUserRole> AspNetUserRoles { get; set; } // AspNetUserRoles
        public DbSet<Company> Companies { get; set; } // Companies
        public DbSet<KebabType> KebabTypes { get; set; } // KebabTypes
        public DbSet<MeatType> MeatTypes { get; set; } // MeatTypes
        public DbSet<Order> Orders { get; set; } // Orders
        public DbSet<SauceType> SauceTypes { get; set; } // SauceTypes
        public DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        public FakeMyDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            AspNetUsers = new FakeDbSet<AspNetUser>("Id");
            AspNetUserClaims = new FakeDbSet<AspNetUserClaim>("Id", "UserId");
            AspNetUserLogins = new FakeDbSet<AspNetUserLogin>("LoginProvider", "ProviderKey", "UserId");
            AspNetUserRoles = new FakeDbSet<AspNetUserRole>("UserId", "RoleId");
            Companies = new FakeDbSet<Company>("Id");
            KebabTypes = new FakeDbSet<KebabType>("Id");
            MeatTypes = new FakeDbSet<MeatType>("Id");
            Orders = new FakeDbSet<Order>("Id");
            SauceTypes = new FakeDbSet<SauceType>("Id");
            sys_DatabaseFirewallRules = new FakeDbSet<sys_DatabaseFirewallRule>("Id", "Name", "StartIpAddress", "EndIpAddress", "CreateDate", "ModifyDate");

        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1);
        }

        public Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DbChangeTracker _changeTracker;

        public DbChangeTracker ChangeTracker { get { return _changeTracker; } }

        private DbContextConfiguration _configuration;

        public DbContextConfiguration Configuration { get { return _configuration; } }

        private Database _database;

        public Database Database { get { return _database; } }

        public DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public DbEntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<DbEntityValidationResult> GetValidationErrors()
        {
            throw new NotImplementedException();
        }

        public DbSet Set(Type entityType)
        {
            throw new NotImplementedException();
        }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        // Stored Procedures

        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            return 0;
        }

        // SpAlterdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            return 0;
        }

        // SpCreatediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
            return 0;
        }

        // SpDropdiagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {
            procResult = 0;
            return new List<SpHelpdiagramdefinitionReturnModel>();
        }

        public Task<List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return Task.FromResult(SpHelpdiagramdefinition(diagramname, ownerId, out procResult));
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {
            procResult = 0;
            return new List<SpHelpdiagramsReturnModel>();
        }

        public Task<List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return Task.FromResult(SpHelpdiagrams(diagramname, ownerId, out procResult));
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
            return 0;
        }

        // SpRenamediagramAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)

        public int SpUpgraddiagrams()
        {
            return 0;
        }

        // SpUpgraddiagramsAsync() cannot be created due to having out parameters, or is relying on the procedure result (int)
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override Task<TEntity> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override Task<TEntity> FindAsync(params object[] keyValues)
        {
            return Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override IEnumerable<TEntity> RemoveRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return Activator.CreateInstance<TDerivedEntity>();
        }

        public override ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute(expression));
        }

        public Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            return Task.FromResult(Execute<TResult>(expression));
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        { }

        public IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }

    }

    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public Task<bool> MoveNextAsync(CancellationToken cancellationToken)
        {
            return Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AspNetUsers
    public class AspNetUser
    {
        public string Id { get; set; } // Id (Primary key) (length: 128)
        public string Email { get; set; } // Email (length: 256)
        public bool EmailConfirmed { get; set; } // EmailConfirmed
        public string PasswordHash { get; set; } // PasswordHash
        public string SecurityStamp { get; set; } // SecurityStamp
        public string PhoneNumber { get; set; } // PhoneNumber
        public bool PhoneNumberConfirmed { get; set; } // PhoneNumberConfirmed
        public bool TwoFactorEnabled { get; set; } // TwoFactorEnabled
        public DateTime? LockoutEndDateUtc { get; set; } // LockoutEndDateUtc
        public bool LockoutEnabled { get; set; } // LockoutEnabled
        public int AccessFailedCount { get; set; } // AccessFailedCount
        public string UserName { get; set; } // UserName (length: 256)

        // Reverse navigation

        /// <summary>
        /// Child Companies where [Companies].[OwerId] point to this entity (FK_Users_Companies)
        /// </summary>
        public virtual ICollection<Company> Companies { get; set; } // Companies.FK_Users_Companies

        /// <summary>
        /// Child Orders where [Orders].[AddedBy] point to this entity (FK_Orders_AspNetUsers)
        /// </summary>
        public virtual ICollection<Order> Orders_AddedBy { get; set; } // Orders.FK_Orders_AspNetUsers

        /// <summary>
        /// Child Orders where [Orders].[UpdatedBy] point to this entity (FK_Orders_AspNetUsers1)
        /// </summary>
        public virtual ICollection<Order> Orders_UpdatedBy { get; set; } // Orders.FK_Orders_AspNetUsers1

        public AspNetUser()
        {
            Companies = new List<Company>();
            Orders_AddedBy = new List<Order>();
            Orders_UpdatedBy = new List<Order>();
        }
    }

    // AspNetUserClaims
    public class AspNetUserClaim
    {
        public int Id { get; set; } // Id (Primary key)
        public string UserId { get; set; } // UserId (Primary key) (length: 128)
        public string ClaimType { get; set; } // ClaimType
        public string ClaimValue { get; set; } // ClaimValue
    }

    // AspNetUserLogins
    public class AspNetUserLogin
    {
        public string LoginProvider { get; set; } // LoginProvider (Primary key) (length: 128)
        public string ProviderKey { get; set; } // ProviderKey (Primary key) (length: 128)
        public string UserId { get; set; } // UserId (Primary key) (length: 128)
    }

    // AspNetUserRoles
    public class AspNetUserRole
    {
        public string UserId { get; set; } // UserId (Primary key) (length: 128)
        public string RoleId { get; set; } // RoleId (Primary key) (length: 128)
    }

    // Companies
    public class Company
    {
        public int Id { get; set; } // Id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string OwerId { get; set; } // OwerId (length: 128)

        // Reverse navigation

        /// <summary>
        /// Child Orders where [Orders].[CompanyID] point to this entity (FK_Orders_Companies)
        /// </summary>
        public virtual ICollection<Order> Orders { get; set; } // Orders.FK_Orders_Companies

        // Foreign keys

        /// <summary>
        /// Parent AspNetUser pointed by [Companies].([OwerId]) (FK_Users_Companies)
        /// </summary>
        public virtual AspNetUser AspNetUser { get; set; } // FK_Users_Companies

        public Company()
        {
            Orders = new List<Order>();
        }
    }

    // KebabTypes
    public class KebabType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Orders where [Orders].[KebabTypeID] point to this entity (FK_Orders_KebabType)
        /// </summary>
        public virtual ICollection<Order> Orders { get; set; } // Orders.FK_Orders_KebabType

        public KebabType()
        {
            Orders = new List<Order>();
        }
    }

    // MeatTypes
    public class MeatType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Orders where [Orders].[MeatTypeID] point to this entity (FK_Orders_MeatType)
        /// </summary>
        public virtual ICollection<Order> Orders { get; set; } // Orders.FK_Orders_MeatType

        public MeatType()
        {
            Orders = new List<Order>();
        }
    }

    // Orders
    public class Order
    {
        public int Id { get; set; } // ID (Primary key)
        public int CompanyId { get; set; } // CompanyID
        public string Name { get; set; } // Name (length: 150)
        public int KebabTypeId { get; set; } // KebabTypeID
        public int SauceTypeId { get; set; } // SauceTypeID
        public int MeatTypeId { get; set; } // MeatTypeID
        public string Notes { get; set; } // Notes
        public DateTime DateAdded { get; set; } // DateAdded
        public DateTime? DateUpdated { get; set; } // DateUpdated
        public string AddedBy { get; set; } // AddedBy (length: 128)
        public string UpdatedBy { get; set; } // UpdatedBy (length: 128)

        // Foreign keys

        /// <summary>
        /// Parent AspNetUser pointed by [Orders].([AddedBy]) (FK_Orders_AspNetUsers)
        /// </summary>
        public virtual AspNetUser AspNetUser_AddedBy { get; set; } // FK_Orders_AspNetUsers

        /// <summary>
        /// Parent AspNetUser pointed by [Orders].([UpdatedBy]) (FK_Orders_AspNetUsers1)
        /// </summary>
        public virtual AspNetUser AspNetUser_UpdatedBy { get; set; } // FK_Orders_AspNetUsers1

        /// <summary>
        /// Parent Company pointed by [Orders].([CompanyId]) (FK_Orders_Companies)
        /// </summary>
        public virtual Company Company { get; set; } // FK_Orders_Companies

        /// <summary>
        /// Parent KebabType pointed by [Orders].([KebabTypeId]) (FK_Orders_KebabType)
        /// </summary>
        public virtual KebabType KebabType { get; set; } // FK_Orders_KebabType

        /// <summary>
        /// Parent MeatType pointed by [Orders].([MeatTypeId]) (FK_Orders_MeatType)
        /// </summary>
        public virtual MeatType MeatType { get; set; } // FK_Orders_MeatType

        /// <summary>
        /// Parent SauceType pointed by [Orders].([SauceTypeId]) (FK_Orders_SauceTypes)
        /// </summary>
        public virtual SauceType SauceType { get; set; } // FK_Orders_SauceTypes

        public Order()
        {
            DateAdded = DateTime.Now;
        }
    }

    // SauceTypes
    public class SauceType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 150)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Orders where [Orders].[SauceTypeID] point to this entity (FK_Orders_SauceTypes)
        /// </summary>
        public virtual ICollection<Order> Orders { get; set; } // Orders.FK_Orders_SauceTypes

        public SauceType()
        {
            Orders = new List<Order>();
        }
    }

    // database_firewall_rules
    public class sys_DatabaseFirewallRule
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (Primary key) (length: 128)
        public string StartIpAddress { get; set; } // start_ip_address (Primary key) (length: 45)
        public string EndIpAddress { get; set; } // end_ip_address (Primary key) (length: 45)
        public DateTime CreateDate { get; set; } // create_date (Primary key)
        public DateTime ModifyDate { get; set; } // modify_date (Primary key)
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // AspNetUsers
    public class AspNetUserConfiguration : EntityTypeConfiguration<AspNetUser>
    {
        public AspNetUserConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserConfiguration(string schema)
        {
            ToTable("AspNetUsers", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.EmailConfirmed).HasColumnName(@"EmailConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.SecurityStamp).HasColumnName(@"SecurityStamp").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.PhoneNumberConfirmed).HasColumnName(@"PhoneNumberConfirmed").HasColumnType("bit").IsRequired();
            Property(x => x.TwoFactorEnabled).HasColumnName(@"TwoFactorEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.LockoutEndDateUtc).HasColumnName(@"LockoutEndDateUtc").HasColumnType("smalldatetime").IsOptional();
            Property(x => x.LockoutEnabled).HasColumnName(@"LockoutEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(256);
        }
    }

    // AspNetUserClaims
    public class AspNetUserClaimConfiguration : EntityTypeConfiguration<AspNetUserClaim>
    {
        public AspNetUserClaimConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserClaimConfiguration(string schema)
        {
            ToTable("AspNetUserClaims", schema);
            HasKey(x => new { x.Id, x.UserId });

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ClaimType).HasColumnName(@"ClaimType").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ClaimValue).HasColumnName(@"ClaimValue").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // AspNetUserLogins
    public class AspNetUserLoginConfiguration : EntityTypeConfiguration<AspNetUserLogin>
    {
        public AspNetUserLoginConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserLoginConfiguration(string schema)
        {
            ToTable("AspNetUserLogins", schema);
            HasKey(x => new { x.LoginProvider, x.ProviderKey, x.UserId });

            Property(x => x.LoginProvider).HasColumnName(@"LoginProvider").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ProviderKey).HasColumnName(@"ProviderKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // AspNetUserRoles
    public class AspNetUserRoleConfiguration : EntityTypeConfiguration<AspNetUserRole>
    {
        public AspNetUserRoleConfiguration()
            : this("dbo")
        {
        }

        public AspNetUserRoleConfiguration(string schema)
        {
            ToTable("AspNetUserRoles", schema);
            HasKey(x => new { x.UserId, x.RoleId });

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }

    // Companies
    public class CompanyConfiguration : EntityTypeConfiguration<Company>
    {
        public CompanyConfiguration()
            : this("dbo")
        {
        }

        public CompanyConfiguration(string schema)
        {
            ToTable("Companies", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.OwerId).HasColumnName(@"OwerId").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);

            // Foreign keys
            HasRequired(a => a.AspNetUser).WithMany(b => b.Companies).HasForeignKey(c => c.OwerId).WillCascadeOnDelete(false); // FK_Users_Companies
        }
    }

    // KebabTypes
    public class KebabTypeConfiguration : EntityTypeConfiguration<KebabType>
    {
        public KebabTypeConfiguration()
            : this("dbo")
        {
        }

        public KebabTypeConfiguration(string schema)
        {
            ToTable("KebabTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // MeatTypes
    public class MeatTypeConfiguration : EntityTypeConfiguration<MeatType>
    {
        public MeatTypeConfiguration()
            : this("dbo")
        {
        }

        public MeatTypeConfiguration(string schema)
        {
            ToTable("MeatTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // Orders
    public class OrderConfiguration : EntityTypeConfiguration<Order>
    {
        public OrderConfiguration()
            : this("dbo")
        {
        }

        public OrderConfiguration(string schema)
        {
            ToTable("Orders", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.CompanyId).HasColumnName(@"CompanyID").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
            Property(x => x.KebabTypeId).HasColumnName(@"KebabTypeID").HasColumnType("int").IsRequired();
            Property(x => x.SauceTypeId).HasColumnName(@"SauceTypeID").HasColumnType("int").IsRequired();
            Property(x => x.MeatTypeId).HasColumnName(@"MeatTypeID").HasColumnType("int").IsRequired();
            Property(x => x.Notes).HasColumnName(@"Notes").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired();
            Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsOptional();
            Property(x => x.AddedBy).HasColumnName(@"AddedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);

            // Foreign keys
            HasOptional(a => a.AspNetUser_UpdatedBy).WithMany(b => b.Orders_UpdatedBy).HasForeignKey(c => c.UpdatedBy).WillCascadeOnDelete(false); // FK_Orders_AspNetUsers1
            HasRequired(a => a.AspNetUser_AddedBy).WithMany(b => b.Orders_AddedBy).HasForeignKey(c => c.AddedBy).WillCascadeOnDelete(false); // FK_Orders_AspNetUsers
            HasRequired(a => a.Company).WithMany(b => b.Orders).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Orders_Companies
            HasRequired(a => a.KebabType).WithMany(b => b.Orders).HasForeignKey(c => c.KebabTypeId).WillCascadeOnDelete(false); // FK_Orders_KebabType
            HasRequired(a => a.MeatType).WithMany(b => b.Orders).HasForeignKey(c => c.MeatTypeId).WillCascadeOnDelete(false); // FK_Orders_MeatType
            HasRequired(a => a.SauceType).WithMany(b => b.Orders).HasForeignKey(c => c.SauceTypeId).WillCascadeOnDelete(false); // FK_Orders_SauceTypes
        }
    }

    // SauceTypes
    public class SauceTypeConfiguration : EntityTypeConfiguration<SauceType>
    {
        public SauceTypeConfiguration()
            : this("dbo")
        {
        }

        public SauceTypeConfiguration(string schema)
        {
            ToTable("SauceTypes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(150);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // database_firewall_rules
    public class sys_DatabaseFirewallRuleConfiguration : EntityTypeConfiguration<sys_DatabaseFirewallRule>
    {
        public sys_DatabaseFirewallRuleConfiguration()
            : this("sys")
        {
        }

        public sys_DatabaseFirewallRuleConfiguration(string schema)
        {
            ToTable("database_firewall_rules", schema);
            HasKey(x => new { x.Id, x.Name, x.StartIpAddress, x.EndIpAddress, x.CreateDate, x.ModifyDate });

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.StartIpAddress).HasColumnName(@"start_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.EndIpAddress).HasColumnName(@"end_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.ModifyDate).HasColumnName(@"modify_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
        }
    }


    #endregion

    #region Stored procedure return models

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class SpHelpdiagramdefinitionReturnModel
    {
        public int? version { get; set; }
        public byte[] definition { get; set; }
    }

    public class SpHelpdiagramsReturnModel
    {
        public string Database { get; set; }
        public string Name { get; set; }
        public int ID { get; set; }
        public string Owner { get; set; }
        public int OwnerID { get; set; }
    }


    #endregion

}
// </auto-generated>
